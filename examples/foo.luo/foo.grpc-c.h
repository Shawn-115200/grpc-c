/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: foo.proto */

#ifndef PROTOBUF_C_foo_2eproto__INCLUDED
#define PROTOBUF_C_foo_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

#include <grpc/grpc.h>
#include <grpc/byte_buffer_reader.h>
#include <grpc/support/alloc.h>
#include <grpc/support/log.h>
#include <grpc-c/grpc-c.h>

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Foo__SigleStreamReq Foo__SigleStreamReq;
typedef struct _Foo__SigleStreamReq foo__sigle_stream_req;
#define foo__sigle_stream_req__init foo__sigle_stream_req__init
#define foo__sigle_stream_req__free_unpacked foo__sigle_stream_req__free_unpacked
typedef struct _Foo__SigleStreamRsp Foo__SigleStreamRsp;
typedef struct _Foo__SigleStreamRsp foo__sigle_stream_rsp;
#define foo__sigle_stream_rsp__init foo__sigle_stream_rsp__init
#define foo__sigle_stream_rsp__free_unpacked foo__sigle_stream_rsp__free_unpacked
typedef struct _Foo__ServerStreamReq Foo__ServerStreamReq;
typedef struct _Foo__ServerStreamReq foo__server_stream_req;
#define foo__server_stream_req__init foo__server_stream_req__init
#define foo__server_stream_req__free_unpacked foo__server_stream_req__free_unpacked
typedef struct _Foo__ServerStreamRsp Foo__ServerStreamRsp;
typedef struct _Foo__ServerStreamRsp foo__server_stream_rsp;
#define foo__server_stream_rsp__init foo__server_stream_rsp__init
#define foo__server_stream_rsp__free_unpacked foo__server_stream_rsp__free_unpacked
typedef struct _Foo__ClientStreamReq Foo__ClientStreamReq;
typedef struct _Foo__ClientStreamReq foo__client_stream_req;
#define foo__client_stream_req__init foo__client_stream_req__init
#define foo__client_stream_req__free_unpacked foo__client_stream_req__free_unpacked
typedef struct _Foo__ClientStreamRsp Foo__ClientStreamRsp;
typedef struct _Foo__ClientStreamRsp foo__client_stream_rsp;
#define foo__client_stream_rsp__init foo__client_stream_rsp__init
#define foo__client_stream_rsp__free_unpacked foo__client_stream_rsp__free_unpacked
typedef struct _Foo__DoubleStreamReq Foo__DoubleStreamReq;
typedef struct _Foo__DoubleStreamReq foo__double_stream_req;
#define foo__double_stream_req__init foo__double_stream_req__init
#define foo__double_stream_req__free_unpacked foo__double_stream_req__free_unpacked
typedef struct _Foo__DoubleStreamRsp Foo__DoubleStreamRsp;
typedef struct _Foo__DoubleStreamRsp foo__double_stream_rsp;
#define foo__double_stream_rsp__init foo__double_stream_rsp__init
#define foo__double_stream_rsp__free_unpacked foo__double_stream_rsp__free_unpacked


/* --- enums --- */


/* --- messages --- */

/*
 * 消息定义
 * Single stream messages
 */
struct  _Foo__SigleStreamReq
{
  ProtobufCMessage base;
  char *name1;
};
#define FOO__SIGLE_STREAM_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__sigle_stream_req__descriptor) \
    , NULL }


struct  _Foo__SigleStreamRsp
{
  ProtobufCMessage base;
  char *message1;
};
#define FOO__SIGLE_STREAM_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__sigle_stream_rsp__descriptor) \
    , NULL }


/*
 * Server stream messages
 */
struct  _Foo__ServerStreamReq
{
  ProtobufCMessage base;
  char *name2;
};
#define FOO__SERVER_STREAM_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__server_stream_req__descriptor) \
    , NULL }


struct  _Foo__ServerStreamRsp
{
  ProtobufCMessage base;
  char *message2;
};
#define FOO__SERVER_STREAM_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__server_stream_rsp__descriptor) \
    , NULL }


/*
 * Client stream messages
 */
struct  _Foo__ClientStreamReq
{
  ProtobufCMessage base;
  char *name3;
};
#define FOO__CLIENT_STREAM_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__client_stream_req__descriptor) \
    , NULL }


struct  _Foo__ClientStreamRsp
{
  ProtobufCMessage base;
  char *message3;
};
#define FOO__CLIENT_STREAM_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__client_stream_rsp__descriptor) \
    , NULL }


/*
 * Double stream messages
 */
struct  _Foo__DoubleStreamReq
{
  ProtobufCMessage base;
  char *name4;
};
#define FOO__DOUBLE_STREAM_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__double_stream_req__descriptor) \
    , NULL }


struct  _Foo__DoubleStreamRsp
{
  ProtobufCMessage base;
  char *message4;
};
#define FOO__DOUBLE_STREAM_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__double_stream_rsp__descriptor) \
    , NULL }


/* Foo__SigleStreamReq methods */
void   foo__sigle_stream_req__init
                     (Foo__SigleStreamReq         *message);
size_t foo__sigle_stream_req__get_packed_size
                     (const Foo__SigleStreamReq   *message);
size_t foo__sigle_stream_req__pack
                     (const Foo__SigleStreamReq   *message,
                      uint8_t             *out);
size_t foo__sigle_stream_req__pack_to_buffer
                     (const Foo__SigleStreamReq   *message,
                      ProtobufCBuffer     *buffer);
Foo__SigleStreamReq *
       foo__sigle_stream_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__sigle_stream_req__free_unpacked
                     (Foo__SigleStreamReq *message,
                      ProtobufCAllocator *allocator);
/* Foo__SigleStreamRsp methods */
void   foo__sigle_stream_rsp__init
                     (Foo__SigleStreamRsp         *message);
size_t foo__sigle_stream_rsp__get_packed_size
                     (const Foo__SigleStreamRsp   *message);
size_t foo__sigle_stream_rsp__pack
                     (const Foo__SigleStreamRsp   *message,
                      uint8_t             *out);
size_t foo__sigle_stream_rsp__pack_to_buffer
                     (const Foo__SigleStreamRsp   *message,
                      ProtobufCBuffer     *buffer);
Foo__SigleStreamRsp *
       foo__sigle_stream_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__sigle_stream_rsp__free_unpacked
                     (Foo__SigleStreamRsp *message,
                      ProtobufCAllocator *allocator);
/* Foo__ServerStreamReq methods */
void   foo__server_stream_req__init
                     (Foo__ServerStreamReq         *message);
size_t foo__server_stream_req__get_packed_size
                     (const Foo__ServerStreamReq   *message);
size_t foo__server_stream_req__pack
                     (const Foo__ServerStreamReq   *message,
                      uint8_t             *out);
size_t foo__server_stream_req__pack_to_buffer
                     (const Foo__ServerStreamReq   *message,
                      ProtobufCBuffer     *buffer);
Foo__ServerStreamReq *
       foo__server_stream_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__server_stream_req__free_unpacked
                     (Foo__ServerStreamReq *message,
                      ProtobufCAllocator *allocator);
/* Foo__ServerStreamRsp methods */
void   foo__server_stream_rsp__init
                     (Foo__ServerStreamRsp         *message);
size_t foo__server_stream_rsp__get_packed_size
                     (const Foo__ServerStreamRsp   *message);
size_t foo__server_stream_rsp__pack
                     (const Foo__ServerStreamRsp   *message,
                      uint8_t             *out);
size_t foo__server_stream_rsp__pack_to_buffer
                     (const Foo__ServerStreamRsp   *message,
                      ProtobufCBuffer     *buffer);
Foo__ServerStreamRsp *
       foo__server_stream_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__server_stream_rsp__free_unpacked
                     (Foo__ServerStreamRsp *message,
                      ProtobufCAllocator *allocator);
/* Foo__ClientStreamReq methods */
void   foo__client_stream_req__init
                     (Foo__ClientStreamReq         *message);
size_t foo__client_stream_req__get_packed_size
                     (const Foo__ClientStreamReq   *message);
size_t foo__client_stream_req__pack
                     (const Foo__ClientStreamReq   *message,
                      uint8_t             *out);
size_t foo__client_stream_req__pack_to_buffer
                     (const Foo__ClientStreamReq   *message,
                      ProtobufCBuffer     *buffer);
Foo__ClientStreamReq *
       foo__client_stream_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__client_stream_req__free_unpacked
                     (Foo__ClientStreamReq *message,
                      ProtobufCAllocator *allocator);
/* Foo__ClientStreamRsp methods */
void   foo__client_stream_rsp__init
                     (Foo__ClientStreamRsp         *message);
size_t foo__client_stream_rsp__get_packed_size
                     (const Foo__ClientStreamRsp   *message);
size_t foo__client_stream_rsp__pack
                     (const Foo__ClientStreamRsp   *message,
                      uint8_t             *out);
size_t foo__client_stream_rsp__pack_to_buffer
                     (const Foo__ClientStreamRsp   *message,
                      ProtobufCBuffer     *buffer);
Foo__ClientStreamRsp *
       foo__client_stream_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__client_stream_rsp__free_unpacked
                     (Foo__ClientStreamRsp *message,
                      ProtobufCAllocator *allocator);
/* Foo__DoubleStreamReq methods */
void   foo__double_stream_req__init
                     (Foo__DoubleStreamReq         *message);
size_t foo__double_stream_req__get_packed_size
                     (const Foo__DoubleStreamReq   *message);
size_t foo__double_stream_req__pack
                     (const Foo__DoubleStreamReq   *message,
                      uint8_t             *out);
size_t foo__double_stream_req__pack_to_buffer
                     (const Foo__DoubleStreamReq   *message,
                      ProtobufCBuffer     *buffer);
Foo__DoubleStreamReq *
       foo__double_stream_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__double_stream_req__free_unpacked
                     (Foo__DoubleStreamReq *message,
                      ProtobufCAllocator *allocator);
/* Foo__DoubleStreamRsp methods */
void   foo__double_stream_rsp__init
                     (Foo__DoubleStreamRsp         *message);
size_t foo__double_stream_rsp__get_packed_size
                     (const Foo__DoubleStreamRsp   *message);
size_t foo__double_stream_rsp__pack
                     (const Foo__DoubleStreamRsp   *message,
                      uint8_t             *out);
size_t foo__double_stream_rsp__pack_to_buffer
                     (const Foo__DoubleStreamRsp   *message,
                      ProtobufCBuffer     *buffer);
Foo__DoubleStreamRsp *
       foo__double_stream_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__double_stream_rsp__free_unpacked
                     (Foo__DoubleStreamRsp *message,
                      ProtobufCAllocator *allocator);

/* --- data packers and unpackers -- */

/* foo__sigle_stream_req packer and unpacker methods */
size_t foo__sigle_stream_req_packer (void *input, grpc_byte_buffer **buffer);
void *foo__sigle_stream_req_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);
void foo__sigle_stream_req_free (Foo__SigleStreamReq * buf);

/* foo__sigle_stream_rsp packer and unpacker methods */
size_t foo__sigle_stream_rsp_packer (void *input, grpc_byte_buffer **buffer);
void *foo__sigle_stream_rsp_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);
void foo__sigle_stream_rsp_free (Foo__SigleStreamRsp * buf);

/* foo__server_stream_req packer and unpacker methods */
size_t foo__server_stream_req_packer (void *input, grpc_byte_buffer **buffer);
void *foo__server_stream_req_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);
void foo__server_stream_req_free (Foo__ServerStreamReq * buf);

/* foo__server_stream_rsp packer and unpacker methods */
size_t foo__server_stream_rsp_packer (void *input, grpc_byte_buffer **buffer);
void *foo__server_stream_rsp_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);
void foo__server_stream_rsp_free (Foo__ServerStreamRsp * buf);

/* foo__client_stream_req packer and unpacker methods */
size_t foo__client_stream_req_packer (void *input, grpc_byte_buffer **buffer);
void *foo__client_stream_req_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);
void foo__client_stream_req_free (Foo__ClientStreamReq * buf);

/* foo__client_stream_rsp packer and unpacker methods */
size_t foo__client_stream_rsp_packer (void *input, grpc_byte_buffer **buffer);
void *foo__client_stream_rsp_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);
void foo__client_stream_rsp_free (Foo__ClientStreamRsp * buf);

/* foo__double_stream_req packer and unpacker methods */
size_t foo__double_stream_req_packer (void *input, grpc_byte_buffer **buffer);
void *foo__double_stream_req_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);
void foo__double_stream_req_free (Foo__DoubleStreamReq * buf);

/* foo__double_stream_rsp packer and unpacker methods */
size_t foo__double_stream_rsp_packer (void *input, grpc_byte_buffer **buffer);
void *foo__double_stream_rsp_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);
void foo__double_stream_rsp_free (Foo__DoubleStreamRsp * buf);


/* --- services --- */

extern const char *foo__greeter__methods[];

extern grpc_c_method_funcs_t foo__greeter__methods__funcs[];

int foo__greeter__service_init (grpc_c_server_t *server);

int foo__greeter__sigle_stream__sync(grpc_c_client_t *client, 
                                       grpc_c_metadata_array_t *array, uint32_t flags, 
                                       Foo__SigleStreamReq *input, Foo__SigleStreamRsp **output, 
                                       grpc_c_status_t *status, long timeout);

int foo__greeter__sigle_stream__async(grpc_c_client_t *client, 
                                        grpc_c_metadata_array_t *array, uint32_t flags, 
                                        Foo__SigleStreamReq *input, 
                                        grpc_c_client_callback_t *cb, void *tag, long timeout);

void foo__greeter__sigle_stream_cb (grpc_c_context_t *context);

int foo__greeter__server_stream__stream(grpc_c_client_t *client, 
                                         grpc_c_metadata_array_t *array, uint32_t flags, 
                                         grpc_c_context_t **context, 
                                         long timeout);

void foo__greeter__server_stream_cb (grpc_c_context_t *context);

int foo__greeter__client_stream__stream(grpc_c_client_t *client, 
                                         grpc_c_metadata_array_t *array, uint32_t flags, 
                                         grpc_c_context_t **context, 
                                         long timeout);

void foo__greeter__client_stream_cb (grpc_c_context_t *context);

int foo__greeter__double_stream__stream(grpc_c_client_t *client, 
                                         grpc_c_metadata_array_t *array, uint32_t flags, 
                                         grpc_c_context_t **context, 
                                         long timeout);

void foo__greeter__double_stream_cb (grpc_c_context_t *context);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor foo__sigle_stream_req__descriptor;
extern const ProtobufCMessageDescriptor foo__sigle_stream_rsp__descriptor;
extern const ProtobufCMessageDescriptor foo__server_stream_req__descriptor;
extern const ProtobufCMessageDescriptor foo__server_stream_rsp__descriptor;
extern const ProtobufCMessageDescriptor foo__client_stream_req__descriptor;
extern const ProtobufCMessageDescriptor foo__client_stream_rsp__descriptor;
extern const ProtobufCMessageDescriptor foo__double_stream_req__descriptor;
extern const ProtobufCMessageDescriptor foo__double_stream_rsp__descriptor;



#endif  /* PROTOBUF_C_foo_2eproto__INCLUDED */
